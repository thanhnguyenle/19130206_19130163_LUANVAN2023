type User{
    id: String
    username: String
    name: String
    email: String
    password: String
    phoneNumber: String
    address: String
    avatar: String
    roles: [Role]
    registeredAt: String
}

input UserInput{
    username: String
    name: String
    email: String
    password: String
    phoneNumber: String
    address: String
    avatar: String
    roles: [String]
}

type UserOutput{
    id: String
}

type Role {
    roleName: String
    description: String
    compositeRoles: [String]
}

input RoleInput{
    roleName: String
    description: String
    compositeRoles: [String]
}

type RoleOut{
    roleName: String
}

input LoginInput{
    email: String
    password: String
}

type LoginOutput{
    accessToken: String
    refreshToken: String
    accessTokenExpiration: Float
    refreshTokenExpiration: Float
}

input registerInput{
    username: String
    name: String
    email: String
    password: String
    phoneNumber: String
    address: String
    avatar: String
}

type registerOutput{
    id: String
}

type Query {
    #user
    users: [User]
    user(id: String): User
    #role
    roles: [Role]
    role(name: String): Role
    #login
    login(loginInput: LoginInput): LoginOutput

}

type Mutation{
    #user
    createUser(userInput: UserInput): UserOutput
    updateUser(id: String, userInput: UserInput): UserOutput
    deleteUser(id: String): UserOutput
    #role
    createRole(roleInput: RoleInput): RoleOut
    updateRole(name: String, roleInput: RoleInput): RoleOut
    deleteRole(name: String): RoleOut
    #register
    register(registerInput: registerInput): registerOutput
}
