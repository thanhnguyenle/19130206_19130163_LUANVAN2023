type Order{
    id: String,
    userID: String,
    numberOfPeople: Int,
    group: String,
    orderDate: String,
    status: String,
    note: String,
    orderProducts: [OrderProduct],
    tables: [Table]
}

type OrderReturn {
    id: String,
    userID: String,
    group: String,
    orderID: String,
    orderReturnDate: String,
    orderProductReturns: [OrderProduct]
    tableReturns: [Table],
    status: String,
    note: String,
}

type OrderProduct {
    orderID: String,
    productID: String,
    quantity: Int,
    price: Float,
    discount: Float
}

type Table {
    id: String,
    name: String,
    numberOfPeople: Int,
    status: String,
    note: String,
    groups: [GroupTable]
}

type GroupTable {
    id: String,
    name: String,
    status: String,
    note: String,
    tables: [Table]
}

type ResultOutput{
    success: Boolean,
}

input Paging{
    page: Int,
    limit: Int
}

input ImageInput{
    url: String,
    description: String
}

type PageOrderInfo{
    orders: [Order],
    currentPage: Int,
    totalPage: Int,
    totalItem: Int
}

type PageTableInfo{
    tables: [Table],
    currentPage: Int,
    totalPage: Int,
    totalItem: Int
}
type PageOrderProductInfo{
    orderProducts: [OrderProduct],
    currentPage: Int,
    totalPage: Int,
    totalItem: Int
}

enum TimeSearch{
    TODAY
    YESTERDAY
    THIS_WEEK
    LAST_WEEK
    THIS_MONTH
    LAST_MONTH
    THIS_YEAR
    LAST_YEAR
    ALL_TIME
}

input OrderInput{
    userID: String,
    numberOfPeople: Int,
    group: String,
    orderDate: String,
    status: String,
    note: String,
    orderProducts: [OrderProductInput],
    tables: [TableInput]
}
input OrderProductInput{
    orderID: String,
    productID: String,
    quantity: Int,
    price: Float,
    discount: Float
}
input TableInput{
    id: String,
    name: String,
    numberOfPeople: Int,
    status: String,
    note: String,
    groups: [GroupTableInput]
}
input GroupTableInput{
    id: String,
    name: String,
    status: String,
    note: String,
    tables: [TableInput]
}
type Query {
   #Order
    findOrderByID(id: String): Order
    findOrdersByUserID(pagingInput: Paging, userID: String, searchType: String, searchValue: String, sortType:String, sortValue: String): PageOrderInfo
    findAllOrderByUserID(userID: String): [Order]
    #OrderProduct
    findOrderLineItemsByOrderID(orderID: String): [OrderProduct]
    filterOrderLineItemsByOrderID(pagingInput: Paging, orderID: String, searchType: String, searchValue: String, sortType:String, sortValue: String): PageOrderProductInfo
    #Table
    findTableByID(id: String): Table
    filterTables(pagingInput: Paging, searchType: String, searchValue: String, sortType:String, sortValue: String): PageTableInfo
    findAllTables: [Table]
    #GroupTable
    findGroupTableByID(id: String): GroupTable
    findAllGroupTables: [GroupTable]
    #OrderReturn
    findOrderReturnByOrderID(orderID: String): OrderReturn
    findOrderReturnByUserID(pagingInput: Paging, userID: String, searchType: String, searchValue: String, sortType:String, sortValue: String): PageOrderInfo



}

type Mutation {
    #Order
    createOrder(order: OrderInput): Order
    updateOrder(id: String, order: OrderInput): Order
    deleteOrder(id: String): ResultOutput
    #OrderProduct
    updateOrderLineItem(orderID: String, orderLineItemInput: OrderProductInput): OrderProduct
    #Table
    createTable(table: TableInput): Table
    updateTable(id: String, table: TableInput): Table
    deleteTable(id: String): ResultOutput
    #GroupTable
    createGroupTable(groupTable: GroupTableInput): GroupTable
    updateGroupTable(id: String, groupTable: GroupTableInput): GroupTable
    deleteGroupTable(id: String): ResultOutput
}
