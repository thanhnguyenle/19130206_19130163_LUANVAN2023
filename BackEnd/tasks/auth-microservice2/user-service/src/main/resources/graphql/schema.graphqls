type User{
    id: String
    username: String
    name: String
    email: String
    password: String
    phoneNumber: String
    address: String
    avatar: String
    roles: [Role]
    groups: [Group]
    registeredAt: String
}

type UserConnection {
    edges: [UserEdge]!
    pageInfo: PageInfo!
}

type UserEdge {
    node: User!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}

input UserInput{
    username: String
    name: String
    email: String
    password: String
    phoneNumber: String
    address: String
    avatar: String
    roles: [String]
    groups: [String]
}

type UserOutput{
    id: String
}

type Role {
    roleName: String
    description: String
    compositeRoles: [String]
}

input RoleInput{
    roleName: String
    description: String
    compositeRoles: [String]
}

type RoleOut{
    roleName: String
}

type Group{
    id: String
    name: String
    description: String
    users: [User]
    roles: [Role]
}

type GroupConnection {
    edges: [GroupEdge]!
    pageInfo: PageInfo!
}

type GroupEdge {
    node: Group!
    cursor: String!
}

input GroupInput{
    name: String
    description: String
    users: [String]
    roles: [String]
}

type GroupOut{
    id: String
}

type GroupScalarOut{
    success: Boolean
}


type Query {
    #user
    usersPaging(first:Int, after:String, last:Int, before:String): UserConnection
    users: [User]
    user(id: String): User
    #role
    roles: [Role]
    role(name: String): Role
    #group
    groups: [Group]
    groupsPaging(first:Int, after:String, last:Int, before:String): GroupConnection
    group(id: String): Group
    groupByName(name: String): Group
    groupOfUser(userID: String): [Group]
}

type Mutation{
    #user
    createUser(userInput: UserInput): UserOutput
    updateUser(id: String, userInput: UserInput): UserOutput
    deleteUser(id: String): UserOutput
    addRoleToUser(roleNames: [String], userID: String): GroupScalarOut
    removeRoleFromUser(roleNames: [String], userID: String): GroupScalarOut
    #role
    createRole(roleInput: RoleInput): RoleOut
    updateRole(name: String, roleInput: RoleInput): RoleOut
    deleteRole(name: String): RoleOut
    #group
    createGroup(groupInput: GroupInput): GroupOut
    updateGroup(id: String, groupInput: GroupInput): GroupOut
    deleteGroup(id: String): GroupOut
    addUserToGroup(userIDs: [String], groupID: String): GroupScalarOut
    removeUserFromGroup(userIDs: [String], groupID: String): GroupScalarOut
    addRoleToGroup(roleNames: [String], groupID: String): GroupScalarOut
    removeRoleFromGroup(roleNames: [String], groupID: String): GroupScalarOut
}
