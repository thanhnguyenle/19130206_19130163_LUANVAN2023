buildscript {
    ext {
        protobufVersion = '3.19.1'
        protobufPluginVersion = '0.9.1'
        grpcVersion = '1.42.1'
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'fitnlu.ntpos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
//add for config client
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}

//add for config client
ext {
    set('springCloudVersion', "2022.0.3")
}

dependencies {
    //spring boot
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //keycloak
    implementation 'org.keycloak:keycloak-spring-boot-starter:16.1.1'
    implementation 'org.keycloak:keycloak-admin-client:16.1.1'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
    implementation 'org.jboss.resteasy:resteasy-multipart-provider:3.15.1.Final'
    implementation 'org.jboss.resteasy:resteasy-jaxb-provider:6.2.3.Final'
    implementation 'org.jboss.resteasy:resteasy-jackson2-provider:3.15.1.Final'
    implementation 'org.jboss.resteasy:resteasy-client:3.15.1.Final'
    implementation 'org.keycloak.bom:keycloak-adapter-bom:16.1.1'

    //reactive programming with mysql
//    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
//    implementation 'dev.miku:r2dbc-mysql:0.8.2.RELEASE'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    //graphQL
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    implementation 'com.graphql-java:graphql-java-tools:5.2.4'
    implementation 'com.graphql-java:graphiql-spring-boot-starter:5.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //eureka-client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.0.0'
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'com.thoughtworks.xstream:xstream:1.4.20'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.fasterxml.woodstox:woodstox-core:6.5.0'

    //security
    implementation 'org.springframework.security:spring-security-config:6.0.3'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //gson
    implementation 'com.google.code.gson:gson:2.10.1'

    //zipkin
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave:2.16.3'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.0.4'
    implementation 'io.micrometer:micrometer-observation:1.10.6'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.0.6'

    //prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus:1.11.2'

    //add for config client
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    //grpc
    implementation 'io.grpc:grpc-stub:1.54.0'
    implementation 'com.google.protobuf:protobuf-java:3.22.2'
    implementation 'io.grpc:grpc-protobuf:1.54.0'
    implementation 'io.grpc:grpc-netty-shaded:1.54.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'net.devh:grpc-spring-boot-starter:2.14.0.RELEASE'

    //excel
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.3'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.3'
}
tasks.register('copyProperties', Copy) {
    from('src/main/resources/application.properties')
    into('src/main/resources/')
    rename('application.properties', 'application-docker-1.properties')
      from('src/main/resources/application-docker.properties')
      into('src/main/resources/')
      rename('application-docker.properties', 'application.properties')

}

//add for config client
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}
idea {
    module {
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/grpc")
        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/grpc")
    }
}
tasks.named('test') {
    useJUnitPlatform()
}
